#!/usr/bin/python3

import mne, sys
import numpy as np
import matplotlib.pyplot as plt

from argparse import ArgumentParser
from mne.io import Raw, read_raw_edf
from mne.preprocessing import ICA
from typing import Optional, Union


CHANNELS_EDF = [
	'FP1', 'FP2', 'F9', 'F7', 'F3', 'Fz', 'F4',
	'F8', 'F10', 'FT9', 'FT7', 'FT8', 'FT10',
	'T9', 'T7', 'C3', 'Cz', 'C4', 'T8', 'T10',
	'TP9', 'TP7', 'CPz', 'TP8', 'TP10',
	'P9', 'P7', 'P3', 'Pz', 'P4', 'P8', 'P10',
	'PO7', 'PO8', 'O1', 'O2', 'ECG1', 'ECG2',
]

ICA_METHODS = [
	'fastica', 'infomax', 'picard',
]


def make_argument_parser() -> ArgumentParser:
	parser = ArgumentParser(description='EEG signal data preprocessing tool')
	parser.add_argument('input', help='input EDF file to process')
	parser.add_argument('-q', '--quiet', action='store_true', help='do not show messages')
	parser.add_argument('-c', '--channels', type=str, nargs='+', help='include selected channels')
	parser.add_argument('-e', '--exclude', type=str, nargs='+', help='exclude selected channels')
	parser.add_argument('-r', '--reference', dest='ref_channels', nargs='+', help='set reference channels')
	parser.add_argument('-m', '--montage', type=str, default='standard_1020', help='set electrode montage')
	parser.add_argument('-i', '--ica', action='store_true', help='perform ICA decomposition')
	parser.add_argument('-is', '--ica-seed', type=int, help='set seed for deterministic results')
	parser.add_argument('-im', '--ica-method', choices=ICA_METHODS, default=ICA_METHODS[0], help='ICA method to use')
	parser.add_argument('-ie', '--ica-exclude', nargs='*', help='ICA components to exclude from result')
	parser.add_argument('-fl', '--filter-low', type=float, default=1, help='low frequency signal limit in Hz')
	parser.add_argument('-fh', '--filter-high', type=float, default=100, help='high frequency signal limit in Hz')
	parser.add_argument('-fn', '--filter-notch', default='europe', help='notch frequency signal limit in Hz')
	parser.add_argument('-sic', '--show-ica-components', action='store_true', help='show ICA components')
	parser.add_argument('-sf', '--show-filtered', action='store_true', help='show filtered EEG data')
	parser.add_argument('-o', '--output', help='save preprocessed EEG data to FIF file')
	return parser

def load_eeg_file(fname: str) -> Optional[Raw]:
	fname = fname.lower()
	
	if fname.endswith('.fif'):
		return Raw(fname, preload=True)
		
	if fname.endswith('.edf'):
		return load_edf_file(fname)
	
	return None

def load_edf_file(fname: str) -> Raw:
	raw = read_raw_edf(fname, preload=True)
	raw.set_eeg_reference(['OD', 'OI'])
	raw.set_channel_types({'ECG1': 'ecg', 'ECG2': 'ecg'})
	raw.pick_channels(CHANNELS_EDF, ordered=True)
	raw.rename_channels({'FP1': 'Fp1', 'FP2': 'Fp2'})
	return raw

def apply_signal_filters(raw: Raw, low_filter=1, high_filter=70, notch_filter=None) -> Raw:
	filtered = raw.filter(l_freq=low_filter, h_freq=high_filter)
	if notch_filter is not None:
		filtered.notch_filter(notch_filter)
	return filtered

def get_ica_components(raw: Raw, method='fastica', seed=None) -> ICA:
	ica = ICA(max_iter='auto', random_state=seed)
	ica.fit(raw)
	return ica

def parse_notch_filter_freqs(freq: Union[str, int]) -> Optional[int]:
	if freq == 'europe':
		freq = 50
	elif freq == 'usa':
		freq = 60
	
	if type(freq) is int:
		freq = np.arange(freq, freq * 5 + 1, freq)
		return freq
	
	return None


def main() -> None:
	parser = make_argument_parser()
	if len(sys.argv) == 1:
		parser.print_usage()
		sys.exit(-1)
	
	args = parser.parse_args()
	if args.quiet is True:
		mne.set_log_level('warning')
	
	raw = load_eeg_file(args.input)
	if args.channels is not None:
		raw.pick_channels(args.channels, ordered=True)
	if args.exclude is not None:
		raw.drop_channels(args.exclude)
	
	raw.set_montage(args.montage)
	if args.ref_channels is not None:
		raw.set_eeg_reference(args.ref_channels)
	
	filtered = raw.copy()
	notch_freqs = parse_notch_filter_freqs(args.filter_notch)
	apply_signal_filters(filtered, low_filter=args.filter_low,
	                               high_filter=args.filter_high,
	                               notch_filter=notch_freqs)
	
	if args.ica is True:
		ica = get_ica_components(filtered, method=args.ica_method, seed=args.ica_seed)
		if args.show_ica_components is True:
			ica.plot_components(inst=filtered)
		if args.ica_exclude is None:
			ica.plot_sources(inst=filtered, block=True)
		ica.apply(filtered, exclude=args.ica_exclude)
	
	if args.show_filtered:
		filtered.plot(block=True)
	
	if args.output is not None:
		filtered.save(args.output, overwrite=True)


if __name__ == '__main__':
	try:
		main()
	except KeyboardInterrupt:
		print('Interrupted.', file=sys.stderr)
		sys.exit(-1)
